#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ VCD IP Manager
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ backend/
"""

import os
import secrets
from passlib.context import CryptContext
from pathlib import Path

def generate_password_hash(password):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è"""
    pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
    return pwd_context.hash(password)

def generate_secret_key():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    return secrets.token_urlsafe(32)

def main():
    print("=" * 60)
    print("VCD IP Manager - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    env_path = Path(".env")
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏–∑ .env_example:")
        print("  cp .env_example .env")
        return
    
    print("\nüìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    print("-" * 40)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'admin'): ").strip()
    if not username:
        username = "admin"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    while True:
        password = input(f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}': ").strip()
        if len(password) < 6:
            print("‚ö†Ô∏è  –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤!")
            continue
        
        password_confirm = input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ").strip()
        if password != password_confirm:
            print("‚ö†Ô∏è  –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            continue
        break
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
    print("\nüîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è...")
    password_hash = generate_password_hash(password)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    print("üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞...")
    secret_key = generate_secret_key()
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env
    with open(env_path, 'r') as f:
        env_content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_section = """
# ================== AUTHENTICATION ==================
# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤ (–ù–ï –î–ï–õ–ò–¢–ï–°–¨ –≠–¢–ò–ú!)
SECRET_KEY={secret_key}

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã
ADMIN_USERNAME={username}
ADMIN_PASSWORD_HASH={password_hash}

# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (24 —á–∞—Å–∞ = 1440 –º–∏–Ω—É—Ç)
ACCESS_TOKEN_EXPIRE_MINUTES=1440
"""
    
    if "AUTHENTICATION" in env_content:
        print("\n‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ .env")
        overwrite = input("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): ").lower()
        if overwrite != 'y':
            print("–û—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ–∫—Ü–∏—é
        lines = env_content.split('\n')
        new_lines = []
        skip = False
        for line in lines:
            if "AUTHENTICATION" in line:
                skip = True
            elif skip and line.strip() and not line.startswith('#') and '=' in line:
                continue
            elif skip and (line.startswith('# ===') or (not line.strip() and new_lines[-1].strip() == '')):
                skip = False
            if not skip:
                new_lines.append(line)
        env_content = '\n'.join(new_lines)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    env_content = env_content.rstrip() + auth_section.format(
        secret_key=secret_key,
        username=username,
        password_hash=password_hash
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º .env
    with open(env_path, 'w') as f:
        f.write(env_content)
    
    print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ .env!")
    print("\n" + "=" * 60)
    print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞:")
    print("-" * 40)
    print(f"–õ–æ–≥–∏–Ω:  {username}")
    print(f"–ü–∞—Ä–æ–ª—å: {password}")
    print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ó–∞–ø–æ–º–Ω–∏—Ç–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ auth.py
    auth_path = Path("auth.py")
    if not auth_path.exists():
        print("\n‚ö†Ô∏è  –§–∞–π–ª auth.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –∫–æ–¥–æ–º –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")
    else:
        print("\n‚úÖ –§–∞–π–ª auth.py –Ω–∞–π–¥–µ–Ω.")
    
    print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
    print("  python app.py")
    print("\n–ò –≤—Ö–æ–¥–∏—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")

if __name__ == "__main__":
    main()