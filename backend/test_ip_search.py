#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ IP –∞–¥—Ä–µ—Å–∞ –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö VCD
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_ip_search.py 91.185.28.166
"""

import sys
import json
import requests
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def search_ip(ip_address, cloud=None):
    """–ü–æ–∏—Å–∫ IP —á–µ—Ä–µ–∑ API"""
    base_url = "http://localhost:8000"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    try:
        health = requests.get(f"{base_url}/api/health")
        if health.status_code != 200:
            print("‚ùå Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: python app.py")
            return
    except:
        print("‚ùå Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: python app.py")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    print(f"üîç –ü–æ–∏—Å–∫ IP –∞–¥—Ä–µ—Å–∞: {ip_address}")
    if cloud:
        print(f"   –í –æ–±–ª–∞–∫–µ: {cloud}")
    print("-" * 60)
    
    url = f"{base_url}/api/search-ip/{ip_address}"
    if cloud:
        url += f"?cloud_name={cloud}"
    
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π: {data['total_occurrences']}")
            print(f"   –û–±–ª–∞–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: {', '.join(data['clouds_searched'])}")
            print()
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –æ–±–ª–∞–∫–∞–º
            for cloud_name, cloud_results in data['results'].items():
                print(f"‚òÅÔ∏è  {cloud_name.upper()}")
                print("=" * 40)
                
                for location_type, locations in cloud_results.items():
                    if locations:
                        print(f"\nüìç {location_type.replace('_', ' ').title()} ({len(locations)} –Ω–∞–π–¥–µ–Ω–æ):")
                        for idx, loc in enumerate(locations, 1):
                            print(f"   {idx}. ", end="")
                            
                            if location_type == 'external_networks':
                                print(f"Network: {loc.get('network_name')}")
                                print(f"      Entity: {loc.get('entity_name')} ({loc.get('entity_type')})")
                                print(f"      Org: {loc.get('org_name')}")
                                print(f"      Deployed: {loc.get('deployed')}")
                                
                            elif location_type == 'nat_rules':
                                print(f"Edge: {loc.get('edge_name')}")
                                print(f"      Rule: {loc.get('rule_name')} ({loc.get('rule_type')})")
                                print(f"      External IPs: {', '.join(loc.get('external_ips', []))}")
                                print(f"      Internal IPs: {', '.join(loc.get('internal_ips', []))}")
                                print(f"      Enabled: {loc.get('enabled')}")
                                
                            elif location_type == 'firewall_rules':
                                print(f"Edge: {loc.get('edge_name')}")
                                print(f"      Rule: {loc.get('rule_name')}")
                                print(f"      Action: {loc.get('action')}")
                                print(f"      Enabled: {loc.get('enabled')}")
                                
                            elif location_type == 'edge_interfaces':
                                print(f"Edge: {loc.get('edge_name')}")
                                print(f"      Network: {loc.get('network_name')}")
                                print(f"      Primary IP: {loc.get('primary_ip')}")
                                print(f"      Gateway: {loc.get('gateway')}")
                                
                            elif location_type == 'load_balancers':
                                print(f"Edge: {loc.get('edge_name')}")
                                print(f"      Service: {loc.get('service_name')}")
                                print(f"      Virtual IP: {loc.get('virtual_ip')}")
                                print(f"      Enabled: {loc.get('enabled')}")
                                
                            elif location_type == 'ipsec_vpn':
                                print(f"Edge: {loc.get('edge_name')}")
                                print(f"      Tunnel: {loc.get('tunnel_name')}")
                                print(f"      Local IP: {loc.get('local_ip')}")
                                print(f"      Peer IP: {loc.get('peer_ip')}")
                                
                            elif location_type == 'ip_sets':
                                print(f"IP Set: {loc.get('ip_set_name')}")
                                print(f"      Org: {loc.get('org_name')}")
                                print(f"      Member: {loc.get('member')}")
                                
                            else:
                                # –û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
                                for key, value in loc.items():
                                    if key not in ['details', 'location']:
                                        print(f"      {key}: {value}")
                            print()
                
                print()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            filename = f"ip_search_{ip_address.replace('.', '_')}.json"
            with open(filename, 'w') as f:
                json.dump(data, f, indent=2, default=str)
            print(f"üíæ –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(response.text)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")

def check_duplicates():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è IP"""
    base_url = "http://localhost:8000"
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è IP –∞–¥—Ä–µ—Å–æ–≤...")
    print("-" * 60)
    
    try:
        response = requests.get(f"{base_url}/api/check-duplicate-ips")
        if response.status_code == 200:
            data = response.json()
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP: {data['total_unique_ips']}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {data['duplicate_count']}")
            print()
            
            if data['duplicates']:
                print("‚ö†Ô∏è  –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è IP –∞–¥—Ä–µ—Å–∞:")
                print("=" * 60)
                
                for dup in data['duplicates']:
                    print(f"\nüî¥ IP: {dup['ip_address']}")
                    print(f"   –í—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è: {dup['occurrence_count']} —Ä–∞–∑")
                    print(f"   –û–±–ª–∞–∫–∞: {', '.join(dup['clouds'])}")
                    print(f"   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {', '.join(dup['organizations'])}")
                    print("   –ú–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
                    
                    for loc in dup['locations']:
                        print(f"      - {loc['cloud']}: {loc['org']} / {loc['pool']} ({loc['type']})")
                        if loc.get('entity'):
                            print(f"        Entity: {loc['entity']}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                filename = "duplicate_ips_report.json"
                with open(filename, 'w') as f:
                    json.dump(data, f, indent=2, default=str)
                print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filename}")
            else:
                print("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è IP –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == "--check-duplicates":
            check_duplicates()
        else:
            ip = sys.argv[1]
            cloud = sys.argv[2] if len(sys.argv) > 2 else None
            search_ip(ip, cloud)
    else:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python test_ip_search.py <IP_ADDRESS> [CLOUD_NAME]")
        print("  python test_ip_search.py --check-duplicates")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python test_ip_search.py 91.185.28.166")
        print("  python test_ip_search.py 91.185.28.166 vcd02")
        print("  python test_ip_search.py --check-duplicates")